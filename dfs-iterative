#include<iostream>
#include <vector>
#include <stack>
using namespace std;

vector <int> adj[100];
bool visited[100];

void dfs(int x)
{
    stack <int> s;
    s.push(x);
    visited[x]=true;
    while(!s.empty())
    {
        int v= s.top();
        cout<<v<<" ";
        s.pop();
        //vector <int>::iterator i;
        for(int i=0;i<adj[v].size();i++)
        {
            
            if(visited[adj[v][i]]==false)
            {
               // cout<<" inside:"<<adj[v][i]<< ":stack ";
                s.push(adj[v][i]);
               // cout<<adj[v][i];
                visited[adj[v][i]]=true;
            }
        }
    }
}

void initialize()
{
    for(int i=0;i<10;i++)
    visited[i]=false;
}

int main()
{
    int x,y,nodes,edges;
    cin>>nodes>>edges;
    for(int i=0;i<edges;i++)
    {
        cin>>x>>y;
        adj[x].push_back(y);
        
    }
    initialize();
    /*for(int i=0;i<nodes;i++)
    {
        cout<<"adj list of node "<<i<<" : ";
        for(int j=0;j<adj[i].size();j++)
        {
            if(j==adj[i].size()-1)
            cout<<adj[i][j]<<endl;
            else
            cout<<adj[i][j]<<"-->";
        }
    }*/
    dfs(1);
    return 0;
}
