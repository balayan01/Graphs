#include<iostream>
#include <vector>
#include <deque>
using namespace std;

vector <int> adj[100];
bool visited[100];

void bfs(int s)
{
    deque <int> q;
    visited[s]=true;
    q.push_back(s);
    while(!q.empty())
    {
        int x=q.front();
        q.pop_front();
        cout<<x<<" ";
        for(int i=0;i<adj[x].size();i++)
        {
            if(visited[adj[x][i]]==false)
            {
                visited[adj[x][i]]=true;
                q.push_back(adj[x][i]);
            }
        }
    }
}

void initialize()
{
    for(int i=0;i<10;i++)
    visited[i]=false;
}

int main()
{
    int x,y,nodes,edges;
    cin>>nodes>>edges;
    for(int i=0;i<edges;i++)
    {
        cin>>x>>y;
        adj[x].push_back(y);
        
    }
    initialize();
    //for printing the adjacency list
    /*for(int i=0;i<nodes;i++)
    {
        cout<<"adj list of node "<<i<<" : ";
        for(int j=0;j<adj[i].size();j++)
        {
            if(j==adj[i].size()-1)
            cout<<adj[i][j]<<endl;
            else
            cout<<adj[i][j]<<"-->";
        }
    }*/
    bfs(1);
    return 0;
}
